{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sergey\\\\Desktop\\\\work\\\\work\\\\react-native-gym-tracker\\\\src\\\\screens\\\\exercise\\\\result-table\\\\ResultTableForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ResultTableBase from \"./ResultTableBase\";\nimport { Icon } from 'react-native-elements';\n\nfunction Cell(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? 0 : _ref$value,\n      index = _ref.index,\n      onChange = _ref.onChange,\n      rowName = _ref.rowName;\n\n  var handleChange = function handleChange(val) {\n    val = +val;\n    if (Number.isNaN(val)) return;\n    console.log(val);\n    if (!val) val = 0;\n    onChange(rowName, index, val);\n  };\n\n  return React.createElement(View, {\n    style: styles.cell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(TextInput, {\n    style: styles.cellText,\n    name: index,\n    value: value,\n    keyboardType: \"numeric\",\n    onChangeText: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction Header(_ref2) {\n  var styles = _ref2.styles,\n      color = _ref2.color,\n      showBtnSubmit = _ref2.showBtnSubmit;\n  return React.createElement(View, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.headerTitle), {}, {\n      color: color\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Date\"), showBtnSubmit && React.createElement(TouchableOpacity, {\n    onPress: function (_onPress) {\n      function onPress() {\n        return _onPress.apply(this, arguments);\n      }\n\n      onPress.toString = function () {\n        return _onPress.toString();\n      };\n\n      return onPress;\n    }(function () {\n      return onPress;\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, React.createElement(Icon, {\n    name: \"done\",\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default function ResultTableForm(onDataAvailable) {\n  var _this = this;\n\n  var _useState = useState({\n    weights: [0],\n    repetitions: [0]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var handleChangeCell = function handleChangeCell(key, index, val) {\n    console.log(key, index, val);\n    setState(function (prevState) {\n      var nextState = _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, key, state[key].map(function (v, i) {\n        return i === index ? val : v;\n      })));\n\n      if (index === state[key].length - 1 && nextState.weights[prevState.weights.length - 1] !== 0 && nextState.repetitions[prevState.repetitions.length - 1] !== 0) {\n        nextState = {\n          weights: [].concat(_toConsumableArray(nextState.weights), [0]),\n          repetitions: [].concat(_toConsumableArray(nextState.repetitions), [0])\n        };\n      }\n\n      if (val === 0 && index !== state[key].length - 1 && Object.keys(nextState).filter(function (k) {\n        return k !== key;\n      }).every(function (k) {\n        return nextState[k][index] === 0;\n      })) {\n        console.log('remove column');\n        nextState = Object.keys(nextState).reduce(function (state, key) {\n          state[key] = nextState[key].filter(function (_, idx) {\n            return idx !== index;\n          });\n          return state;\n        }, {});\n      }\n\n      return nextState;\n    });\n  };\n\n  var firstKey = Object.keys(state)[0];\n  var dataAvailable = false;\n\n  if (state[firstKey].some(function (val, i) {\n    return val && Object.keys(state).filter(function (k) {\n      return k !== firstKey;\n    }).every(function (k) {\n      return state[k][i];\n    });\n  })) {\n    dataAvailable = true;\n  }\n\n  return React.createElement(ResultTableBase, {\n    data: state,\n    color: \"white\",\n    bgColor: \"#d32f2f\",\n    renderCell: function renderCell(value, index, rowName) {\n      return React.createElement(Cell, {\n        value: value,\n        index: index,\n        key: index,\n        onChange: handleChangeCell,\n        rowName: rowName,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      });\n    },\n    renderHeader: function renderHeader(styles) {\n      return React.createElement(Header, {\n        styles: styles,\n        color: \"white\",\n        showBtnSubmit: dataAvailable,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  cell: {},\n  cellText: {\n    lineHeight: 40,\n    fontSize: 18,\n    textAlign: 'center',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/Sergey/Desktop/work/work/react-native-gym-tracker/src/screens/exercise/result-table/ResultTableForm.js"],"names":["React","useEffect","useState","ResultTableBase","Icon","Cell","value","index","onChange","rowName","handleChange","val","Number","isNaN","console","log","styles","cell","cellText","Header","color","showBtnSubmit","header","headerTitle","onPress","ResultTableForm","onDataAvailable","weights","repetitions","state","setState","handleChangeCell","key","prevState","nextState","map","v","i","length","Object","keys","filter","k","every","reduce","_","idx","firstKey","dataAvailable","some","StyleSheet","create","lineHeight","fontSize","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet, TextInput, View, Text, TouchableOpacity } from 'react-native';\r\nimport ResultTableBase from './ResultTableBase';\r\nimport { Icon } from 'react-native-elements'\r\n\r\n\r\nfunction Cell({value = 0, index, onChange, rowName}) {\r\n\r\n  const handleChange = val => {\r\n    val = +val\r\n\r\n    if (Number.isNaN(val)) return \r\n    console.log(val)\r\n    if (!val) val = 0 \r\n    onChange(rowName, index, val)\r\n  }\r\n  return (\r\n    <View style={styles.cell}>\r\n      <TextInput\r\n          style={styles.cellText}\r\n          name={index}\r\n          value={value}\r\n          keyboardType=\"numeric\"\r\n          onChangeText={handleChange}\r\n      />\r\n    </View>\r\n  )\r\n}\r\n\r\nfunction Header({\r\n  styles,\r\n  color,\r\n  showBtnSubmit\r\n}) {\r\n  return (\r\n    <View style={styles.header}>\r\n      <Text style={{\r\n        ...styles.headerTitle,\r\n        color\r\n      }}>Date</Text>\r\n      {\r\n        showBtnSubmit&&(<TouchableOpacity\r\n          onPress={() => onPress}\r\n        >\r\n          <Icon\r\n            name='done'\r\n            color={color} \r\n          />\r\n        </TouchableOpacity>)\r\n      }\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default function ResultTableForm(\r\n  onDataAvailable\r\n) {\r\n  const [state, setState] = useState({\r\n    weights: [0],\r\n    repetitions: [0]\r\n  })\r\n  const handleChangeCell = (key, index, val) => {\r\n    console.log(key, index, val)\r\n\r\n    setState(prevState => {\r\n      let nextState = {\r\n        ...prevState, \r\n        [key]: state[key].map(\r\n          (v, i) => i === index ? val : v\r\n        )\r\n      }\r\n\r\n      if (\r\n        index === state[key].length - 1 &&\r\n        (nextState.weights[prevState.weights.length-1] !== 0 && nextState.repetitions[prevState.repetitions.length-1] !== 0)\r\n      ) {\r\n        nextState = {\r\n          weights: [...nextState.weights, 0],\r\n          repetitions: [...nextState.repetitions, 0]\r\n        }\r\n      }\r\n\r\n      if (\r\n        val === 0 &&\r\n        index !== state[key].length - 1 &&\r\n        Object.keys(nextState).filter(k => k !== key).every(k => nextState[k][index] === 0)\r\n      ) {\r\n        console.log('remove column')\r\n        nextState = Object.keys(nextState).reduce(\r\n          (state, key) => {\r\n            state[key] = nextState[key].filter((_, idx) => idx !== index )\r\n            return state\r\n          }\r\n        , {})\r\n      }\r\n      \r\n      return nextState\r\n    })\r\n  }\r\n\r\n  const firstKey = Object.keys(state)[0];\r\n  let dataAvailable = false;\r\n  if (\r\n    state[firstKey].some((val, i) => {\r\n      return val&&\r\n            Object.keys(state).filter(k => k !== firstKey).every(k => state[k][i])\r\n    })\r\n  ) {\r\n    dataAvailable = true\r\n  }\r\n\r\n  return (\r\n      <ResultTableBase\r\n          data={state}\r\n          color=\"white\"\r\n          bgColor=\"#d32f2f\"\r\n          renderCell={\r\n            (value, index, rowName) => (\r\n              <Cell \r\n                value={value} \r\n                index={index} \r\n                key={index} \r\n                onChange={handleChangeCell} \r\n                rowName={rowName} \r\n              />\r\n          )}\r\n          renderHeader={\r\n            (styles) => <Header styles={styles} color=\"white\" showBtnSubmit={dataAvailable} />\r\n          }\r\n      />\r\n  )\r\n}\r\n\r\n  const styles = StyleSheet.create({\r\n    cell: {\r\n    },\r\n    cellText: {\r\n        lineHeight: 40,\r\n        fontSize: 18,\r\n        textAlign: 'center',\r\n        color: 'white',\r\n\r\n    }\r\n  });"]},"metadata":{},"sourceType":"module"}